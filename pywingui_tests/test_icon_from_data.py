'''Maxim Kolosov (2013).
Custom Icon example based on pyWinGUI.
Original was from C++ MSDN CreateAlphaCursor example.
Differeces is - hBitmap created from big string data,
represented as 16x16 32 bit hexadecimal values.'''

from pywingui.gdi import *
from pywingui.wtl import *

icon_str = '''
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000,
0xFF000000, 0xFF00FC00, 0x00000000, 0xFF001F00, 0xFFFF0000, 0xFFF80000, 0x00000000, 0x00000000, 0x00000000, 0xFFF80000, 0x00000000, 0xFF0F0000, 0xFF0000FF, 0xFF0000F0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF000300, 0xFFFF0000, 0xFFE00000, 0x00000000, 0x00000000, 0x00000000, 0xFFE00000, 0x00000000, 0xFF010000, 0xFF0000FF, 0xFF0000E0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF001000, 0xFFFF0000, 0xFFF00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000,
0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFF0000FF, 0xFF0000FE, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00FC00, 0x00000000, 0xFF001F00, 0xFFFF0000, 0xFFF80000, 0x00000000, 0x00000000, 0x00000000, 0xFFF80000, 0x00000000, 0xFF0F0000, 0xFF0000FF, 0xFF0000F0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF003000, 0xFFFF0000, 0xFFE00000, 0x00000000, 0x00000000, 0x00000000, 0xFFE00000, 0x00000000, 0xFF010000, 0xFF0000FF, 0xFF0000E0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF001000, 0xFFFF0000, 0xFFF00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000,
0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFF0000FF, 0xFF0000FE, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00FC00, 0x00000000, 0xFF001F00, 0xFFFF0000, 0xFFF80000, 0x00000000, 0x00000000, 0x00000000, 0xFFF80000, 0x00000000, 0xFF0F0000, 0xFF0000FF, 0xFF0000F0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF003000, 0xFFFF0000, 0xFFE00000, 0x00000000, 0x00000000, 0x00000000, 0xFFE00000, 0x00000000, 0xFF010000, 0xFF0000FF, 0xFF0000E0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF001000, 0xFFFF0000, 0xFFF00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFF000000,
0xFF000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xFFFF0000, 0x00000000, 0xFFFF0000, 0xFF0000FF, 0xFF0000FE, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00FC00, 0x00000000, 0xFF001F00, 0xFFFF0000, 0xFFF80000, 0x00000000, 0x00000000, 0x00000000, 0xFFF80000, 0x00000000, 0xFF0F0000, 0xFF0000FF, 0xFF0000F0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF00F000, 0x00000000, 0xFF003000, 0xFFFF0000, 0xFFE00000, 0x00000000, 0x00000000, 0x00000000, 0xFFE00000, 0x00000000, 0xFF010000, 0xFF0000FF, 0xFF0000E0, 0x00000000, 0xFF000000,
0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000'''
icon_data = icon_str.replace('\n', ' ').split(', ')
icon_size = len(icon_data)
icon_bits = (c_ulong * icon_size)()
for i in range(icon_size):
	icon_bits[i] = DWORD(long(float.fromhex(icon_data[i])))

def CreateAlphaIconOrCursor(dwWidth = 32, dwHeight = 32, return_type = True):
	size = dwWidth * dwHeight

	# Create an COLORED bitmap with ALPHA channel, used 32 bit data.
	hBitmap = CreateBitmap(dwWidth, dwHeight, 1, 32, icon_bits)

	# Create an empty mask bitmap.
	hMonoBitmap = CreateBitmap(dwWidth, dwHeight, 1, 1, None)

	ii = ICONINFO()
	ii.fIcon = return_type # Change fIcon to 'False' to create an alpha cursor
	ii.xHotspot = 0
	ii.yHotspot = 0
	ii.hbmMask = hMonoBitmap
	ii.hbmColor = hBitmap

	# Create the alpha cursor with the alpha DIB section.
	hAlphaIcon = CreateIconIndirect(ii)

	DeleteObject(hBitmap)
	DeleteObject(hMonoBitmap)

	return hAlphaIcon

class MyWindow(Window):
	_window_title_ = 'CreateIconIndirect example, based on MSDN CreateAlphaCursor example'
	_window_background_ = GetStockObject(WHITE_BRUSH)
	_window_icon_ = _window_icon_sm_ = CreateAlphaIconOrCursor(16, 16)

	def OnDestroy(self, event):
		self.application.Quit()

	msg_handler(WM_DESTROY)(OnDestroy)

def main():
	myWindow = MyWindow(rcPos = RECT(0, 0, 320, 240))
	application = Application()
	myWindow.application = application
	application.Run()

if __name__ == '__main__':
	main()
